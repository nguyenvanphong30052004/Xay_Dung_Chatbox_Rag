import streamlit as st
import os
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationalRetrievalChain
from langchain.memory import ConversationBufferMemory
from langchain.schema import Document

# Page configuration
st.set_page_config(
    page_title="RAG Chatbot - AI Assistant",
    page_icon="ü§ñ",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    .user-message {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
    }
    .bot-message {
        background-color: #f3e5f5;
        border-left: 4px solid #9c27b0;
    }
</style>
""", unsafe_allow_html=True)

class RAGChatbot:
    def __init__(self):
        self.vectorstore = None
        self.qa_chain = None
        self.memory = ConversationBufferMemory(
            memory_key="chat_history",
            return_messages=True
        )
        
    def create_sample_data(self):
        """Create sample data for demo"""
        return """
Artificial Intelligence (AI) l√† m·ªôt lƒ©nh v·ª±c khoa h·ªçc m√°y t√≠nh t·∫≠p trung v√†o vi·ªác t·∫°o ra c√°c h·ªá th·ªëng c√≥ th·ªÉ th·ª±c hi·ªán c√°c nhi·ªám v·ª• th∆∞·ªùng ƒë√≤i h·ªèi tr√≠ th√¥ng minh c·ªßa con ng∆∞·ªùi. AI bao g·ªìm nhi·ªÅu nh√°nh con nh∆∞ machine learning, deep learning, natural language processing, computer vision, v√† robotics.

Machine Learning (ML) l√† m·ªôt nh√°nh c·ªßa AI cho ph√©p m√°y t√≠nh h·ªçc h·ªèi v√† c·∫£i thi·ªán t·ª´ d·ªØ li·ªáu m√† kh√¥ng c·∫ßn ƒë∆∞·ª£c l·∫≠p tr√¨nh r√µ r√†ng. C√≥ ba lo·∫°i machine learning ch√≠nh: supervised learning, unsupervised learning, v√† reinforcement learning.

Deep Learning l√† m·ªôt t·∫≠p con c·ªßa machine learning s·ª≠ d·ª•ng c√°c m·∫°ng neural v·ªõi nhi·ªÅu l·ªõp (deep neural networks) ƒë·ªÉ h·ªçc c√°c m·∫´u ph·ª©c t·∫°p t·ª´ d·ªØ li·ªáu. Deep learning ƒë√£ ƒë·∫°t ƒë∆∞·ª£c nh·ªØng th√†nh t·ª±u ƒë√°ng k·ªÉ trong c√°c lƒ©nh v·ª±c nh∆∞ nh·∫≠n d·∫°ng h√¨nh ·∫£nh, x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n, v√† ch∆°i game.

Natural Language Processing (NLP) l√† lƒ©nh v·ª±c AI t·∫≠p trung v√†o vi·ªác gi√∫p m√°y t√≠nh hi·ªÉu, di·ªÖn gi·∫£i v√† t·∫°o ra ng√¥n ng·ªØ t·ª± nhi√™n c·ªßa con ng∆∞·ªùi. NLP ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c ·ª©ng d·ª•ng nh∆∞ chatbot, d·ªãch m√°y, ph√¢n t√≠ch c·∫£m x√∫c, v√† t√≥m t·∫Øt vƒÉn b·∫£n.

Computer Vision l√† lƒ©nh v·ª±c AI nghi√™n c·ª©u c√°ch m√°y t√≠nh c√≥ th·ªÉ hi·ªÉu v√† x·ª≠ l√Ω th√¥ng tin t·ª´ h√¨nh ·∫£nh v√† video. C√°c ·ª©ng d·ª•ng bao g·ªìm nh·∫≠n d·∫°ng khu√¥n m·∫∑t, ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng, ph√¢n ƒëo·∫°n h√¨nh ·∫£nh, v√† xe t·ª± l√°i.
        """
    
    def load_documents(self, text_content):
        """Load documents from text content"""
        paragraphs = [p.strip() for p in text_content.split('\n\n') if p.strip()]
        documents = [Document(page_content=p, metadata={'source': 'sample_data'}) for p in paragraphs]
        return documents
    
    def split_documents(self, documents, chunk_size=1000, chunk_overlap=200):
        """Split documents into chunks"""
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=chunk_size,
            chunk_overlap=chunk_overlap,
            length_function=len,
        )
        chunks = text_splitter.split_documents(documents)
        return chunks
    
    def create_vectorstore(self, chunks):
        """Create vector store from document chunks"""
        try:
            if not os.getenv("OPENAI_API_KEY"):
                st.error("OpenAI API key not found.")
                return False
            
            embeddings = OpenAIEmbeddings()
            self.vectorstore = Chroma.from_documents(
                documents=chunks,
                embedding=embeddings
            )
            return True
        except Exception as e:
            st.error(f"Error creating vector store: {e}")
            return False
    
    def setup_qa_chain(self):
        """Setup the question-answering chain"""
        try:
            if not self.vectorstore:
                st.error("Vector store not initialized.")
                return False
            
            llm = ChatOpenAI(
                model_name="gpt-3.5-turbo",
                temperature=0.7,
                max_tokens=1000
            )
            
            self.qa_chain = ConversationalRetrievalChain.from_llm(
                llm=llm,
                retriever=self.vectorstore.as_retriever(
                    search_type="similarity",
                    search_kwargs={"k": 3}
                ),
                memory=self.memory,
                return_source_documents=True,
                verbose=False
            )
            return True
        except Exception as e:
            st.error(f"Error setting up QA chain: {e}")
            return False
    
    def ask_question(self, question):
        """Ask a question and get response"""
        try:
            if not self.qa_chain:
                return "Chatbot ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o."
            
            result = self.qa_chain({"question": question})
            answer = result["answer"]
            source_docs = result.get("source_documents", [])
            
            response = f"**ü§ñ Tr·∫£ l·ªùi:**\n{answer}\n\n"
            if source_docs:
                response += "**üìö Ngu·ªìn tham kh·∫£o:**\n"
                for i, doc in enumerate(source_docs[:2], 1):
                    response += f"{i}. {doc.page_content[:200]}...\n\n"
            
            return response
        except Exception as e:
            return f"L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {e}"
    
    def initialize_chatbot(self):
        """Initialize the chatbot"""
        with st.spinner("ƒêang kh·ªüi t·∫°o chatbot..."):
            text_content = self.create_sample_data()
            documents = self.load_documents(text_content)
            chunks = self.split_documents(documents)
            st.success(f"ƒê√£ chia th√†nh {len(chunks)} chunks")
            
            if not self.create_vectorstore(chunks):
                return False
            
            if not self.setup_qa_chain():
                return False
            
            st.success("Chatbot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")
            return True

def main():
    # Header
    st.markdown('<h1 class="main-header">ü§ñ RAG Chatbot</h1>', unsafe_allow_html=True)
    st.markdown("### Tr·ª£ l√Ω AI th√¥ng minh v·ªõi kh·∫£ nƒÉng t√¨m ki·∫øm v√† tr·∫£ l·ªùi d·ª±a tr√™n t√†i li·ªáu")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        
        # API Key input
        api_key = st.text_input(
            "OpenAI API Key",
            type="password",
            help="Nh·∫≠p OpenAI API key c·ªßa b·∫°n"
        )
        
        if api_key:
            os.environ["OPENAI_API_KEY"] = api_key
        
        # Initialize button
        if st.button("üöÄ Kh·ªüi t·∫°o Chatbot", type="primary"):
            if not api_key:
                st.error("Vui l√≤ng nh·∫≠p OpenAI API key!")
                return
            
            if 'chatbot' not in st.session_state:
                st.session_state.chatbot = RAGChatbot()
            
            if st.session_state.chatbot.initialize_chatbot():
                st.session_state.initialized = True
                st.success("Chatbot ƒë√£ s·∫µn s√†ng!")
            else:
                st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o chatbot!")
        
        # Clear chat button
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
            if 'chat_history' in st.session_state:
                st.session_state.chat_history = []
            st.rerun()
    
    # Initialize session state
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'initialized' not in st.session_state:
        st.session_state.initialized = False
    
    # Main chat area
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.subheader("üí¨ Cu·ªôc tr√≤ chuy·ªán")
        
        # Display chat history
        for message in st.session_state.chat_history:
            if message["role"] == "user":
                st.markdown(f"""
                <div class="chat-message user-message">
                    <strong>B·∫°n:</strong> {message["content"]}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message bot-message">
                    <strong>ü§ñ Bot:</strong> {message["content"]}
                </div>
                """, unsafe_allow_html=True)
        
        # Chat input
        if st.session_state.initialized:
            user_question = st.text_input(
                "Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...",
                key="user_input",
                placeholder="V√≠ d·ª•: AI l√† g√¨?"
            )
            
            if st.button("G·ª≠i", key="send_button"):
                if user_question.strip():
                    st.session_state.chat_history.append({
                        "role": "user",
                        "content": user_question
                    })
                    
                    with st.spinner("ü§ñ ƒêang suy nghƒ©..."):
                        response = st.session_state.chatbot.ask_question(user_question)
                    
                    st.session_state.chat_history.append({
                        "role": "assistant",
                        "content": response
                    })
                    
                    st.rerun()
        else:
            st.info("üëÜ Vui l√≤ng kh·ªüi t·∫°o chatbot trong sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu chat!")
            
            st.markdown("### üìù C√¢u h·ªèi m·∫´u")
            sample_questions = [
                "AI l√† g√¨ v√† c√≥ nh·ªØng ·ª©ng d·ª•ng n√†o?",
                "Machine Learning c√≥ nh·ªØng lo·∫°i n√†o?",
                "Deep Learning ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nh·ªØng lƒ©nh v·ª±c n√†o?",
                "NLP l√† g√¨ v√† ƒë∆∞·ª£c ·ª©ng d·ª•ng nh∆∞ th·∫ø n√†o?",
                "Computer Vision c√≥ nh·ªØng ·ª©ng d·ª•ng g√¨?"
            ]
            
            for question in sample_questions:
                st.markdown(f"- {question}")

if __name__ == "__main__":
    main() 